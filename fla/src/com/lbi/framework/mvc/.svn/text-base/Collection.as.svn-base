import com.lbi.core.events.Event;
import com.lbi.core.events.EventDispatcher;
import com.lbi.core.model.ISelectable;
import com.lbi.debug.Log;
import com.lbi.framework.mvc.IEventMapper;
import com.lbi.framework.mvc.ViewBase;
import com.lbi.framework.mvc.EventMapper;
[Event("ready")]
[Event("changed")]
[Event("increased")]
[Event("decreased")]
/**
 * @author michaelforrest
 * You will generally register views to the CHANGED event.
 * INCREASED and DECREASED events are not fired if the items loop.
 * 
 */
class com.lbi.core.model.Collection extends Array implements IEventMapper{
	public static var READY : String = "ready";
	private function dispatchReady():Void {dispatchEvent(new Event(READY));}
	
	public static var CHANGED : String = "changed";
	private function dispatchChanged():Void {dispatchEvent(new Event(CHANGED));}
	
	public static var INCREASED : String = "increased";
	private function dispatchIncreased():Void {dispatchEvent(new Event(INCREASED));}
	
	public static var DECREASED : String = "decreased";
	private function dispatchDecreased():Void {dispatchEvent(new Event(DECREASED));}
	
	private var __index:Number = 0;
	private function get _index():Number{
		return __index; 
	}
	private function set _index(v:Number):Void{
		__index = v;
		_current = this[__index];
	}
	
	private var __current:ISelectable;
	private function get _current():ISelectable{
		return __current;
	}
	private function set _current(v:ISelectable):Void{
		__current = v;
	}
	
	private var loop : Boolean;
	
	function Collection($loop:Boolean) {
		super();
		loop = $loop;
		EventDispatcher.initialize(this);
		EventMapper.initialize(this);
	}
	/**
	 * Copies a normal array into this collection.
	 */
	public function importArray($array : Array) :Void{
		while(length>0) pop();
		for (var i : Number = 0; i < $array.length; i++) {
			push($array[i]);
		}
	}
	/**
	 * Returns currently selected item
	 */
	public function current() : ISelectable {
		return _current;
	}

	private function hasNext() : Boolean {
		return _index+1 < length && length > 0;
	}
	/**
	 * If there is another item in the collection after the current (or the collection is looped) then 
	 * this method selects the next item and dispatches Collection.INCREASED, then Collection.CHANGED
 	 * The selected item conventionally dispatches SELECTED and DESELECTED events, encouraged via the use of the ISelectable interface.
	 */
	public function next() : Void {
		if(!hasNext() && !loop) return;
		current().deselect();
		if(hasNext()){
			_index++;
			dispatchIncreased();
		}
		else{
			_index = 0;
		}
		current().select();
		dispatchChanged();
	}

	private function hasPrev() : Boolean {
		return _index > 0;
	}
	/**
	 * If there is another item in the collection before the current (or the collection is looped) then 
	 * this method selects the previous item and dispatches Collection.DECREASED, then Collection.CHANGED.
	 * The selected item conventionally dispatches SELECTED and DESELECTED events, encouraged via the use of the ISelectable interface.
	 */
	public function previous() : Void {
		if(!hasPrev() && !loop) return;
		current().deselect();
		if(hasPrev()){
			_index --;
			dispatchDecreased();
		}
		else{
			_index = length-1;	
		}
		current().select(); 
		dispatchChanged();		
	}
	/**
	 * selects the required item by reference.
	 * This is useful when you have a button in your view that holds a reference to an item model.
	 * The view can simply call collection.select(model) and the collection will be updated.
	 */
	public function select($item:ISelectable):Void{
		
		for (var i : Number = 0; i < this.length; i++) {
			var item:Object = this[i];
			if(item===$item) {
				if(i==_index) return; // already selected
				current().deselect();
				_index = i;
				current().select();
				dispatchChanged();
				return;
			}
		}
		Log.error("Couldn't find " + $item + " in " + this);
	}
	/**
	 * Removes an item from the collection
	 */
	public function remove($item:ISelectable) : Void{
		for (var i : Number = 0; i < this.length; i++) {
			var item:Object = this[i];
			if(item===$item) {
				splice(i,1);
				_index = getIndex(current());
				return;	
			}
		}
		Log.error("Couldn't find " + $item + " in " + this + " to remove");
	}
	/**
	 * finds (without selecting) an item in the array based on the object reference.
	 */
	public function find($item:ISelectable) : ISelectable{
		for (var i : Number = 0; i < this.length; i++) {
			var item:ISelectable = this[i];
			if(item===$item) {
				return item;
			}
		}
	}
	public function first() : Object{
		return this[0];	
	}
	/**
	 * TODO: decide whether this belongs in the library.
	 */
	public function last() : Object {
		return this[length-1];
	}
	public function getCurrentIndex() :Number{
		return _index;
	}
	/**
	 * Returns the index of the specified item in this array.
	 */
	public function getIndex($item:ISelectable) : Number{
		for (var i : Number = 0; i < this.length; i++) {
			var item:ISelectable = this[i];
			if(item==$item) return i;
		}
		Log.error("Couldn't find item " + $item + " in Collection " + this);
	}

	public function addEventListener(type : String, handler : Function, once_only : Boolean) : Void {}
	public function removeEventListener(type : String, handler : Function) : Void {}
	public function dispatchEvent(e : Event) : Void {}
	public function registerEvents(view : ViewBase, events : Array, class_name_for_debugging : String) : Void {}
	public function getPossibleEvents() : Array {
		return null;
	}
	public function eventIsPossible(event_name : String) : Boolean {
		return null;
	}

}